NODE_ROLES = (ENV['E2E_NODE_ROLES'] ||
  ["server-0", "agent-1"])
NODE_BOXES = (ENV['E2E_NODE_BOXES'] ||
  ['generic/ubuntu2310', 'jborean93/WindowsServer2022'])
NODE_CPUS = (ENV['E2E_NODE_CPUS'] || 2).to_i
NODE_MEMORY = (ENV['E2E_NODE_MEMORY'] || 2048).to_i
NETWORK_PREFIX = "10.10.10"
install_type = ""

def provision(vm, role, role_num, node_num)
  vm.box = NODE_BOXES[node_num]
  vm.hostname = role
  # An expanded netmask is required to allow VM<-->VM communication, virtualbox defaults to /32
  node_ip = "#{NETWORK_PREFIX}.#{100+node_num}"
  vm.network "private_network", ip: node_ip, netmask: "255.255.255.0"

  scripts_location = Dir.exist?("./scripts") ? "./scripts" : "../scripts" 
  vagrant_defaults = File.exist?("./vagrantdefaults.rb") ? "./vagrantdefaults.rb" : "../vagrantdefaults.rb"
  load vagrant_defaults

  defaultOSConfigure(vm)
  
  vm.provision "shell", inline: "ping -c 2 k3s.io"
  
  if !REGISTRY.empty?
    vm.provision "Set private registry", type: "shell", path: scripts_location + "/registry.sh", args: [ "#{NETWORK_PREFIX}.1" ]
  end
  addCoverageDir(vm, role, GOCOVER)

  if role.include?("server") && role_num == 0
    vm.provision 'k3s-primary-server', type: 'k3s', run: 'once' do |k3s|
      k3s.args = "server "
      k3s.config = <<~YAML
        token: vagrant
        node-external-ip: #{NETWORK_PREFIX}.100
        flannel-iface: eth1
      YAML
      k3s.env = %W[K3S_KUBECONFIG_MODE=0644 INSTALL_K3S_CHANNEL=latest]
      k3s.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
    end
  end
end

Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-k3s", "vagrant-reload", "vagrant-scp"]
  # For windows, just use the password not the private key
  config.ssh.password    = "vagrant"
  # Default provider is libvirt, virtualbox is only provided as a backup
  config.vm.provider "libvirt" do |v|
    v.cpus = NODE_CPUS
    v.memory = NODE_MEMORY
    # We replicate the default prefix, but add a timestamp to enable parallel runs and cleanup of old VMs
    v.default_prefix = File.basename(Dir.getwd) + "_" + Time.now.to_i.to_s + "_"
  end
  
  if NODE_ROLES.kind_of?(String)
    NODE_ROLES = NODE_ROLES.split(" ", -1)
  end
  if NODE_BOXES.kind_of?(String)
    NODE_BOXES = NODE_BOXES.split(" ", -1)
  end

  NODE_ROLES.each_with_index do |role, i|
    role_num = role.split("-", -1).pop.to_i
    config.vm.define role do |node|
      provision(node.vm, role, role_num, i)
    end
  end
end
